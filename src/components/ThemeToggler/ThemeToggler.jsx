import { useTheme } from '../../context/ThemeContext';
import css from './ThemeToggler.module.css';

export const ThemeToggler = () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ useTheme –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ–¥ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–µ–π
  const themeContext = useTheme();
  
  // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
  if (!themeContext) {
    console.error('ThemeContext –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ ThemeProvider –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.');
    return (
      <button className={css.themeToggler} aria-label="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É">
        ‚öôÔ∏è
      </button>
    );
  }
  
  const { isDarkTheme, toggleTheme } = themeContext;

  return (
    <button 
      className={css.themeToggler} 
      onClick={toggleTheme} 
      aria-label="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É"
    >
      {isDarkTheme ? '‚òÄÔ∏è' : 'üåô'}
    </button>
  );
};
